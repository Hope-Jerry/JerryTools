import{V as r,g as l,D as h,R as c}from"../@codemirror/@codemirror.e164719c.js";class g{constructor(t){this.view=t,this.indentUnit=l(t.state),this.initialPaddingLeft=null,this.generate(t.state)}update(t){const e=l(t.state);(e!==this.indentUnit||t.docChanged||t.viewportChanged)&&(this.indentUnit=e,this.generate(t.state))}generate(t){const e=new c;this.initialPaddingLeft?this.addStyleToBuilder(e,t,this.initialPaddingLeft):this.view.requestMeasure({read:i=>{const n=i.contentDOM.querySelector(".cm-line");n&&(this.initialPaddingLeft=window.getComputedStyle(n).getPropertyValue("padding-left"),this.addStyleToBuilder(e,t,this.initialPaddingLeft)),this.decorations=e.finish()}}),this.decorations=e.finish()}addStyleToBuilder(t,e,i){const n=this.getVisibleLines(e);for(const a of n){const s=this.getIndentSize(a),d=`calc(${s+this.indentUnit}ch + ${i})`;t.add(a.from,a.from,h.line({attributes:{style:`padding-left: ${d}; text-indent: -${s+this.indentUnit}ch;`}}))}}getVisibleLines(t){const e=new Set;let i=null;for(const{from:n,to:a}of this.view.visibleRanges){let s=n;for(;s<=a;){const d=t.doc.lineAt(s);i!==d&&(e.add(d),i=d),s=d.to+1}}return e}getIndentSize(t){return t.text.length-t.text.trimStart().length}}const u=[r.fromClass(g,{decorations:o=>o.decorations})];export{u as w};
